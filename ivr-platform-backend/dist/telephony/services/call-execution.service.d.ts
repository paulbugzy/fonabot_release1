import { Repository } from 'typeorm';
import { ASRService } from './asr.service';
import { RedisService } from '../../redis/redis.service';
import { NLUService } from './nlu.service';
import { FonaBotEventsGateway } from '../gateways/fonabot-events.gateway';
import { CallSession } from '../../entities/call-session.entity';
import { IvrFlow } from '../../entities/ivr-flow.entity';
import { IvrFlowNode } from '../../entities/ivr-flow-node.entity';
import { CallLogEvent } from '../../entities/call-log-event.entity';
import { CredentialsService } from '../../credentials/credentials.service';
import { HttpService } from '@nestjs/axios';
export declare class CallExecutionService {
    private readonly callSessionRepository;
    private readonly ivrFlowRepository;
    private readonly callLogEventRepository;
    private readonly httpService;
    private readonly credentialsService;
    private readonly eventsGateway;
    private readonly redisService;
    private readonly asrService;
    private readonly nluService;
    private readonly logger;
    constructor(callSessionRepository: Repository<CallSession>, ivrFlowRepository: Repository<IvrFlow>, callLogEventRepository: Repository<CallLogEvent>, httpService: HttpService, credentialsService: CredentialsService, eventsGateway: FonaBotEventsGateway, redisService: RedisService, asrService: ASRService, nluService: NLUService);
    processExternalASR(callSid: string, recordingUrl: string): Promise<{
        transcript: string;
        confidence: number;
    }>;
    updateSessionVariables(callSid: string, updates: Record<string, any>): Promise<void>;
    executeStep(callSid: string): Promise<string>;
    private executeNode;
    private handleStartNode;
    private handlePlayMessageNode;
    private handleHangupNode;
    private handleGetInputNode;
    private handleConditionNode;
    private handleTransferNode;
    private handleWebhookNode;
    private handleSetVariableNode;
    private handleAIRoutineNode;
    private replaceVariables;
    private processTemplate;
    private evaluateExpression;
    private logNodeEvent;
    private findNextNode;
    updateSessionNextNode(session: CallSession, nextNode: IvrFlowNode, input?: {
        type: 'dtmf' | 'speech';
        value: string;
    }): Promise<void>;
    private completeSession;
    private logNodeEntry;
}
