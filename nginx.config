# /etc/nginx/nginx.conf or /etc/nginx/conf.d/yourdomain.conf
# It's common to put server blocks in /etc/nginx/sites-available/yourdomain.conf
# and then symlink to /etc/nginx/sites-enabled/

# General Nginx settings (usually in nginx.conf)
# user www-data; # Or your Nginx user
# worker_processes auto;
# pid /run/nginx.pid;
# include /etc/nginx/modules-enabled/*.conf;

# events {
#    worker_connections 768;
#    # multi_accept on;
# }

# http {
    ##
    # Basic Settings
    ##
    # sendfile on;
    # tcp_nopush on;
    # tcp_nodelay on;
    # keepalive_timeout 65;
    # types_hash_max_size 2048;
    # server_tokens off; # Hide Nginx version

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    # include /etc/nginx/mime.types;
    # default_type application/octet-stream;

    ##
    # SSL Settings
    ##
    # These are often defined globally or included from a snippets file
    # ssl_protocols TLSv1.2 TLSv1.3; # Handled in your server block, which is fine
    # ssl_prefer_server_ciphers on; # Handled in your server block
    # ssl_dhparam /etc/nginx/dhparam.pem; # You have ssl_dhparams in server block

    ##
    # Logging Settings
    ##
    # access_log /var/log/nginx/access.log;
    # error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##
    # gzip on;
    # gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    ##
    # Virtual Host Configs
    ##
    # include /etc/nginx/conf.d/*.conf;
    # include /etc/nginx/sites-enabled/*;


# Server block for HTTP to HTTPS redirection
server {
    listen 80;
    listen [::]:80; # Listen on IPv6 as well
    server_name fonabot.com www.fonabot.com;

    # For Certbot ACME challenge (if you're using http-01 challenge)
    # Ensure this path is accessible by Let's Encrypt/Certbot
    location ~ /.well-known/acme-challenge/ {
        allow all;
        root /var/www/html; # Or a dedicated directory for challenges
    }

    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Server block for HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2; # Listen on IPv6 as well
    server_name fonabot.com www.fonabot.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/fonabot.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/fonabot.com/privkey.pem;

    # Reference your specific SSL options file if it exists and is maintained
    # The 'options-ssl-nginx.conf' and 'ssl-dhparams.pem' are typically generated by Certbot
    # or can be created using Mozilla's SSL Config Generator for strong security.
    include options-ssl-nginx.conf; # This file should contain recommended cipher suites and protocols.
    ssl_dhparams /etc/letsencrypt/ssl-dhparams.pem; # Diffie-Hellman parameters for PFS.

    # If options-ssl-nginx.conf doesn't define these, or for clarity:
    ssl_protocols TLSv1.2 TLSv1.3; # Modern, secure protocols. TLSv1.3 is preferred.
    ssl_prefer_server_ciphers off; # Changed to 'off'. Modern clients should negotiate the best cipher.
                                  # TLSv1.3 handles cipher preference differently. 'on' can sometimes be problematic.
                                  # If using TLSv1.2 predominantly, 'on' might be fine with a well-ordered cipher list.
    # A strong cipher suite. Your list is good. This is an example from Mozilla's intermediate compatibility.
    # Ensure it aligns with what's in options-ssl-nginx.conf if included.
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    ssl_session_cache shared:SSL:10m; # ~40,000 sessions.
    ssl_session_timeout 1d; # Increased for better resumption for returning clients. Default is 5m.
    ssl_session_tickets off; # Session tickets have known security issues. OCSP stapling is preferred.

    # OCSP Stapling - Improves SSL handshake speed and privacy
    ssl_stapling on;
    ssl_stapling_verify on;
    # Use a trusted resolver for OCSP queries (e.g., Google's, Cloudflare's, or your ISP's)
    resolver 8.8.8.8 8.8.4.4 1.1.1.1 valid=300s;
    resolver_timeout 5s;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always; # HSTS (2 years). Preload only after confirming everything works.
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    # Deprecated X-XSS-Protection; CSP is preferred. However, it doesn't hurt for older browsers.
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # Permissions-Policy: Deny features by default unless explicitly needed.
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), midi=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=(), fullscreen=(self), autoplay=(self)" always;

    # Content Security Policy (CSP) - This is a critical header.
    # START STRICT AND LOOSEN AS NEEDED.
    # 'unsafe-inline' for script-src and style-src should be avoided by using external files or CSP nonces/hashes.
    # connect-src needs to allow WebSocket (wss:) and API calls to your own domain.
    # If you use external fonts, CDNs for libraries, analytics, etc., they need to be added here.
    add_header Content-Security-Policy "default-src 'self'; \
        script-src 'self' 'unsafe-inline'; \
        style-src 'self' 'unsafe-inline'; \
        img-src 'self' data:; \
        font-src 'self'; \
        connect-src 'self' wss://fonabot.com ws://fonabot.com https://fonabot.com; \
        frame-ancestors 'self'; \
        form-action 'self'; \
        base-uri 'self';" always;
        # object-src 'none'; # Good to add if you don't use <object>, <embed>, <applet>

    # Optimize serving of static files (compression)
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_min_length 1000; # Don't gzip very small files
    gzip_buffers 16 8k;

    # Logging
    access_log /var/log/nginx/fonabot.com.access.log;
    error_log /var/log/nginx/fonabot.com.error.log warn; # Log warnings and higher severity

    # Root for frontend application (Single Page Application)
    location / {
        root /home/ubuntu/fonabot_release1/fonabot-frontend/dist; # Make sure this path is correct
        index index.html index.htm;
        try_files $uri $uri/ /index.html; # Crucial for SPA routing

        # Security for root location - prevent access to hidden files
        location ~ /\. {
            deny all;
        }
    }

    # Cache control for static assets (adjust paths if your build process is different)
    # Typically, Vite/other bundlers output assets to a subdirectory like /assets/ with hashed filenames.
    location ~* \.(?:css|js|map|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg| आदी|mp4|m4v|mov|wmv|svg|svgz|ttf|eot|woff|woff2)$ {
        root /home/ubuntu/fonabot_release1/fonabot-frontend/dist; # Ensure root is correctly set here too
        expires 1y;
        add_header Cache-Control "public, immutable"; # 'immutable' for hashed assets
        access_log off; # Optional: reduce logging for static assets
    }
    # If your assets are specifically in an /assets/ folder and are hashed:
    # location /assets/ {
    #     root /home/ubuntu/fonabot_release1/fonabot-frontend/dist;
    #     expires 1y;
    #     add_header Cache-Control "public, immutable";
    #     access_log off;
    # }


    # Backend API reverse proxy
    # The port here should match your backend application's listening port (e.g., 3001 from previous examples)
    location /api/ {
        proxy_pass http://localhost:3001/api;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # For WebSockets, though usually for /socket.io/ path
        proxy_set_header Connection 'upgrade';  # For WebSockets
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host; # Some applications might need this
        proxy_set_header X-Forwarded-Port $server_port;

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffer_size 16k;
        proxy_buffers 4 64k;
        proxy_busy_buffers_size 128k;
        proxy_temp_file_write_size 128k;

        proxy_cache_bypass $http_upgrade; # Don't cache WebSocket upgrades
    }

    # WebSocket reverse proxy for Socket.IO
    # The port here should match your backend application's listening port
    location /socket.io/ {
        proxy_pass http://localhost:3001/socket.io/; # Trailing slash is important here
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # Explicitly "upgrade"
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Increase timeouts for long-polling connections if needed by older Socket.IO clients
        proxy_connect_timeout 7d; # Example, adjust as needed
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }

    # Optional: Deny access to common sensitive files if not handled by root location
    location ~* /(\.git|\.hg|\.svn|Makefile|README.md|composer\.json|package\.json|yarn\.lock|node_modules)/ {
        deny all;
        return 404;
    }

    # Optional: Custom error pages (if you have them)
    # error_page 404 /404.html;
    # location = /404.html {
    #     root /var/www/html/errors; # Example path for custom error pages
    #     internal;
    # }
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /var/www/html/errors; # Example path for custom error pages
    #     internal;
    # }
}

# } # End of http block if you included it