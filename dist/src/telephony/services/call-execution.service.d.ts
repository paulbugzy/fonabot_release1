import { Repository } from 'typeorm';
import { ASRService } from './asr.service';
import { RedisService } from '../../redis/redis.service';
import { NLUService } from './nlu.service';
import { FonaBotEventsGateway } from '../gateways/fonabot-events.gateway';
import { CallSession } from '../../entities/call-session.entity';
import { IvrFlow } from '../../entities/ivr-flow.entity';
import { CallLogEvent } from '../../entities/call-log-event.entity';
export declare class CallExecutionService {
    private callSessionRepository;
    private asrService;
    private nluService;
    private eventsGateway;
    private ivrFlowRepository;
    private callLogEventRepository;
    private credentialsService;
    private ivrFlowRepository;
    private redisService;
    private readonly logger;
    constructor(callSessionRepository: Repository<CallSession>, asrService: ASRService, nluService: NLUService, eventsGateway: FonaBotEventsGateway, ivrFlowRepository: Repository<IvrFlow>, callLogEventRepository: Repository<CallLogEvent>, credentialsService: CredentialsService, ivrFlowRepository: Repository<IvrFlow>, redisService: RedisService);
    executeStep(callSid: string): Promise<string>;
    private executeNode;
    private handleStartNode;
    private handlePlayMessageNode;
    private handleHangupNode;
    private handleGetInputNode;
    private handleConditionNode;
    private handleTransferNode;
    private handleWebhookNode;
    private handleSetVariableNode;
    private handleAIRoutineNode;
    private replaceVariables;
    private processTemplate;
    private evaluateExpression;
    private logNodeEvent;
    private findNextNode;
    private updateSessionNextNode;
    private completeSession;
    private logNodeEntry;
}
